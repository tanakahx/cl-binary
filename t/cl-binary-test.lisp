(in-package :cl-user)
(defpackage :cl-binary-test
  (:use :cl
        :cl-binary
        :fiveam))
(in-package :cl-binary-test)

(def-suite cl-binary-test)
(in-suite cl-binary-test)

(test read-u*
  (with-binary-input-stream (in #(#x01 #x23 #x45 #x67))
    (is (and (= (read-u8 in) #x01)
             (= (read-u8 in) #x23)
             (= (read-u8 in) #x45)
             (= (read-u8 in) #x67))))
  (with-binary-input-stream (in #(#x01 #x23 #x45 #x67))
    (is (and (= (read-u16 in) #x2301)
             (= (read-u16 in) #x6745))))
  (with-binary-input-stream (in #(#x01 #x23 #x45 #x67))
    (is (= (read-u32 in) #x67452301)))
  (with-binary-input-stream (in #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef))
    (is (= (read-u64 in) #xefcdab8967452301)))

  (with-binary-input-stream (in #(#x01))
    (is (= (read-u32 in) #x00000001))
    (is (eq (read-u32 in) nil)))
  (with-binary-input-stream (in #(#x01 #x23))
    (is (= (read-u32 in) #x00002301))
    (is (eq (read-u32 in) nil)))
  (with-binary-input-stream (in #(#x01 #x23 #x45))
    (is (= (read-u32 in) #x00452301))
    (is (eq (read-u32 in) nil)))
  (with-binary-input-stream (in #(#x01 #x23 #x45 #x67))
    (is (= (read-u32 in) #x67452301))
    (is (eq (read-u32 in) nil))))

(test write-u*
  (is (equalp (with-binary-output-stream (out)
                (write-u8 out #x01)
                (write-u8 out #x23)
                (write-u8 out #x45)
                (write-u8 out #x67))
              #(#x01 #x23 #x45 #x67)))
  (is (equalp (with-binary-output-stream (out)
                (write-u16 out #x2301)
                (write-u16 out #x6745))
              #(#x01 #x23 #x45 #x67)))
  (is (equalp (with-binary-output-stream (out)
                (write-u32 out #x67452301)
                (write-u32 out #xefcdab89))
              #(#x01 #x23 #x45 #x67
                #x89 #xab #xcd #xef)))
  (is (equalp (with-binary-output-stream (out)
                (write-u64 out #xefcdab8967452301))
              #(#x01 #x23 #x45 #x67
                #x89 #xab #xcd #xef))))

(test read-s*
  (with-binary-input-stream (in #(#x80 #xff #xff #xff))
    (is (= (read-s8 in) (- (expt 2 7)))))
  (with-binary-input-stream (in #(#x00 #x80 #xff #xff))
    (is (= (read-s16 in) (- (expt 2 15)))))
  (with-binary-input-stream (in #(#x00 #x00 #x00 #x80))
    (is (= (read-s32 in) (- (expt 2 31)))))
  (with-binary-input-stream (in #(#x00 #x00 #x00 #x00 #x00 #x00 #x00 #x80))
    (is (= (read-s64 in) (- (expt 2 63))))))

(test write-s*
  (is (equalp (with-binary-output-stream (out)
                (write-s8 out (+ (- (expt 2 7)) 0))
                (write-s8 out (+ (- (expt 2 7)) 1))
                (write-s8 out (+ (- (expt 2 7)) 2))
                (write-s8 out (+ (- (expt 2 7)) 3)))
              #(#x80 #x81 #x82 #x83)))
  (is (equalp (with-binary-output-stream (out)
                (write-s16 out (+ (- (expt 2 15)) 0))
                (write-s16 out (+ (- (expt 2 15)) 1))
                (write-s16 out (+ (- (expt 2 15)) 2))
                (write-s16 out (+ (- (expt 2 15)) 3)))
              #(#x00 #x80 #x01 #x80
                #x02 #x80 #x03 #x80)))
  (is (equalp (with-binary-output-stream (out)
                (write-s32 out (+ (- (expt 2 31)) 0))
                (write-s32 out (+ (- (expt 2 31)) 1))
                (write-s32 out (+ (- (expt 2 31)) 2))
                (write-s32 out (+ (- (expt 2 31)) 3)))
              #(#x00 #x00 #x00 #x80
                #x01 #x00 #x00 #x80
                #x02 #x00 #x00 #x80
                #x03 #x00 #x00 #x80)))
  (is (equalp (with-binary-output-stream (out)
                (write-s64 out (+ (- (expt 2 63)) 0))
                (write-s64 out (+ (- (expt 2 63)) 1))
                (write-s64 out (+ (- (expt 2 63)) 2))
                (write-s64 out (+ (- (expt 2 63)) 3)))
              #(#x00 #x00 #x00 #x00 #x00 #x00 #x00 #x80
                #x01 #x00 #x00 #x00 #x00 #x00 #x00 #x80
                #x02 #x00 #x00 #x00 #x00 #x00 #x00 #x80
                #x03 #x00 #x00 #x00 #x00 #x00 #x00 #x80))))

(test read-uvector
  (with-binary-input-stream (in #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef))
    (is (equalp (read-u8vector 8 in)
                #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef))))
  (with-binary-input-stream (in #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef))
    (is (equalp (read-u16vector 4 in)
                #(#x2301 #x6745 #xab89 #xefcd))))
  (with-binary-input-stream (in #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef))
    (is (equalp (read-u32vector 2 in)
                #(#x67452301 #xefcdab89))))
  (with-binary-input-stream (in #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef))
    (is (equalp (read-u64vector 1 in)
                #(#xefcdab8967452301)))))

(test write-uvector
  (is (equalp (with-binary-output-stream (out)
                (write-u8vector out #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef)))
              #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef)))
  (is (equalp (with-binary-output-stream (out)
                (write-u16vector out #(#x2301 #x6745 #xab89 #xefcd)))
              #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef)))
  (is (equalp (with-binary-output-stream (out)
                (write-u32vector out #(#x67452301 #xefcdab89)))
              #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef)))
  (is (equalp (with-binary-output-stream (out)
                (write-u64vector out #(#xefcdab8967452301)))
              #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef))))

(test uvector-to-string
  (is (string= (uvector-to-string #(65 66 67 68))
               "ABCD")))

(test make-uvector
  (is (equalp (make-u8vector 4)
              #(0 0 0 0)))
  (is (equalp (make-u8vector 4 #xff)
              #(#xff #xff #xff #xff)))
  (is (equalp (make-u64vector 1)
              #(0)))
  (is (equalp (make-u64vector 1 #x0123456789abcdef)
              #(#x0123456789abcdef))))

(test get-u*
  (is (and (= (get-u8 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 0) #x01)
           (= (get-u8 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 1) #x23)
           (= (get-u8 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 2) #x45)
           (= (get-u8 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 3) #x67)))
  (is (and (= (get-u16 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 0) #x2301)
           (= (get-u16 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 1) #x4523)
           (= (get-u16 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 2) #x6745)
           (= (get-u16 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 3) #x8967)))
  (is (and (= (get-u32 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 0) #x67452301)
           (= (get-u32 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 1) #x89674523)
           (= (get-u32 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 2) #xab896745)
           (= (get-u32 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 3) #xcdab8967)))
  (is (and (= (get-u64 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 0) #xefcdab8967452301)
           (= (get-u64 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 1) #x01efcdab89674523)
           (= (get-u64 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 2) #x2301efcdab896745)
           (= (get-u64 #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef) 3) #x452301efcdab8967))))

(test put-u*
  (is (and (let ((uv (make-u8vector 16))) (put-u8 uv 0 #x01) (equalp uv #(#x01 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u8 uv 1 #x01) (equalp uv #(#x00 #x01 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u8 uv 2 #x01) (equalp uv #(#x00 #x00 #x01 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u8 uv 3 #x01) (equalp uv #(#x00 #x00 #x00 #x01 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))))
  (is (and (let ((uv (make-u8vector 16))) (put-u16 uv 0 #x2301) (equalp uv #(#x01 #x23 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u16 uv 1 #x2301) (equalp uv #(#x00 #x01 #x23 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u16 uv 2 #x2301) (equalp uv #(#x00 #x00 #x01 #x23 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u16 uv 3 #x2301) (equalp uv #(#x00 #x00 #x00 #x01 #x23 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))))
  (is (and (let ((uv (make-u8vector 16))) (put-u32 uv 0 #x67452301) (equalp uv #(#x01 #x23 #x45 #x67 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u32 uv 1 #x67452301) (equalp uv #(#x00 #x01 #x23 #x45 #x67 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u32 uv 2 #x67452301) (equalp uv #(#x00 #x00 #x01 #x23 #x45 #x67 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u32 uv 3 #x67452301) (equalp uv #(#x00 #x00 #x00 #x01 #x23 #x45 #x67 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))))
  (is (and (let ((uv (make-u8vector 16))) (put-u64 uv 0 #xefcdab8967452301) (equalp uv #(#x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u64 uv 1 #xefcdab8967452301) (equalp uv #(#x00 #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u64 uv 2 #xefcdab8967452301) (equalp uv #(#x00 #x00 #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-u64 uv 3 #xefcdab8967452301) (equalp uv #(#x00 #x00 #x00 #x01 #x23 #x45 #x67 #x89 #xab #xcd #xef #x00 #x00 #x00 #x00 #x00))))))

(test get-s*
  (is (and (= (get-s8 #(#x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 0) (- (expt 2 7)))
           (= (get-s8 #(#xff #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 1) (- (expt 2 7)))
           (= (get-s8 #(#xff #xff #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 2) (- (expt 2 7)))
           (= (get-s8 #(#xff #xff #xff #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 3) (- (expt 2 7)))))
  (is (and (= (get-s16 #(#x00 #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 0) (- (expt 2 15)))
           (= (get-s16 #(#xff #x00 #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 1) (- (expt 2 15)))
           (= (get-s16 #(#xff #xff #x00 #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 2) (- (expt 2 15)))
           (= (get-s16 #(#xff #xff #xff #x00 #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 3) (- (expt 2 15)))))
  (is (and (= (get-s32 #(#x00 #x00 #x00 #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 0) (- (expt 2 31)))
           (= (get-s32 #(#xff #x00 #x00 #x00 #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 1) (- (expt 2 31)))
           (= (get-s32 #(#xff #xff #x00 #x00 #x00 #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff #xff) 2) (- (expt 2 31)))
           (= (get-s32 #(#xff #xff #xff #x00 #x00 #x00 #x80 #xff #xff #xff #xff #xff #xff #xff #xff #xff) 3) (- (expt 2 31)))))
  (is (and (= (get-s64 #(#x00 #x00 #x00 #x00 #x00 #x00 #x00 #x80 #xff #xff #xff #xff #xff #xff #xff #xff) 0) (- (expt 2 63)))
           (= (get-s64 #(#xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x80 #xff #xff #xff #xff #xff #xff #xff) 1) (- (expt 2 63)))
           (= (get-s64 #(#xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x80 #xff #xff #xff #xff #xff #xff) 2) (- (expt 2 63)))
           (= (get-s64 #(#xff #xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x80 #xff #xff #xff #xff #xff) 3) (- (expt 2 63))))))

(test put-s*
  (is (and (let ((uv (make-u8vector 16))) (put-s8 uv 0 -1) (equalp uv #(#xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s8 uv 1 -1) (equalp uv #(#x00 #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s8 uv 2 -1) (equalp uv #(#x00 #x00 #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s8 uv 3 -1) (equalp uv #(#x00 #x00 #x00 #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))))
  (is (and (let ((uv (make-u8vector 16))) (put-s16 uv 0 -1) (equalp uv #(#xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s16 uv 1 -1) (equalp uv #(#x00 #xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s16 uv 2 -1) (equalp uv #(#x00 #x00 #xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s16 uv 3 -1) (equalp uv #(#x00 #x00 #x00 #xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))))
  (is (and (let ((uv (make-u8vector 16))) (put-s32 uv 0 -1) (equalp uv #(#xff #xff #xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s32 uv 1 -1) (equalp uv #(#x00 #xff #xff #xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s32 uv 2 -1) (equalp uv #(#x00 #x00 #xff #xff #xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s32 uv 3 -1) (equalp uv #(#x00 #x00 #x00 #xff #xff #xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))))
  (is (and (let ((uv (make-u8vector 16))) (put-s64 uv 0 -1) (equalp uv #(#xff #xff #xff #xff #xff #xff #xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s64 uv 1 -1) (equalp uv #(#x00 #xff #xff #xff #xff #xff #xff #xff #xff #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s64 uv 2 -1) (equalp uv #(#x00 #x00 #xff #xff #xff #xff #xff #xff #xff #xff #x00 #x00 #x00 #x00 #x00 #x00)))
           (let ((uv (make-u8vector 16))) (put-s64 uv 3 -1) (equalp uv #(#x00 #x00 #x00 #xff #xff #xff #xff #xff #xff #xff #xff #x00 #x00 #x00 #x00 #x00))))))
